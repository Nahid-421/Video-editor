# main.py

import os
import asyncio
import subprocess
import json
import logging
import threading
from flask import Flask

from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import MessageNotModified

# --- ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGGER = logging.getLogger(__name__)

try:
    API_ID = int(os.environ.get("API_ID"))
    API_HASH = os.environ.get("API_HASH")
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
except (ValueError, TypeError) as e:
    LOGGER.critical(f"‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á: {e}")
    exit()

# --- Flask ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
app = Flask(__name__)

@app.route('/')
def index():
    """‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡¶ï‡ßá ‡¶∏‡¶ö‡¶≤ ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶è‡¶á ‡¶∞‡ßÅ‡¶ü‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡•§"""
    return "‡¶¨‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶≤‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§!"

# --- Pyrogram ‡¶¨‡¶ü ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
bot = Client("ad_merge_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# --- ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶´‡¶æ‡¶á‡¶≤-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶∏‡ßá‡¶∂‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ---
SESSIONS_DIR = "user_sessions"
if not os.path.exists(SESSIONS_DIR):
    os.makedirs(SESSIONS_DIR)

def get_session_path(user_id):
    return os.path.join(SESSIONS_DIR, f"{user_id}.json")

def save_session(user_id, data):
    try:
        with open(get_session_path(user_id), "w") as f:
            json.dump(data, f, indent=4)
    except Exception as e:
        LOGGER.error(f"‡¶∏‡ßá‡¶∂‡¶® ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (User ID: {user_id}): {e}")

def load_session(user_id):
    path = get_session_path(user_id)
    if os.path.exists(path):
        try:
            with open(path, "r") as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            return {}
    return {}

def clear_session(user_id):
    path = get_session_path(user_id)
    if os.path.exists(path):
        try:
            os.remove(path)
        except OSError as e:
            LOGGER.error(f"‡¶∏‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (User ID: {user_id}): {e}")

# --- ‡¶¨‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---
@bot.on_message(filters.command("start") & filters.private)
async def start(client, message):
    user_id = message.from_user.id
    clear_session(user_id)
    save_session(user_id, {})
    await message.reply("üëã ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®:")

@bot.on_message(filters.video & filters.private)
async def handle_video(client, message):
    user_id = message.from_user.id
    session = load_session(user_id)
    
    if "movie_info" not in session:
        session["movie_info"] = {"chat_id": message.chat.id, "message_id": message.id}
        save_session(user_id, session)
        await message.reply(
            "üì¢ ‡¶ï‡¶§‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¨‡¶∏‡¶æ‡¶¨‡ßá‡¶®?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("1", callback_data="ads_1"),
                 InlineKeyboardButton("2", callback_data="ads_2"),
                 InlineKeyboardButton("3", callback_data="ads_3")],
            ])
        )
    else:
        if "ad_count" not in session:
            await message.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            return

        ads_info = session.get("ads_info", [])
        ads_info.append({"chat_id": message.chat.id, "message_id": message.id})
        session["ads_info"] = ads_info
        save_session(user_id, session)

        if len(ads_info) == session.get("ad_count", 0):
            processing_message = await message.reply("üîß ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶õ‡¶ø, ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...")
            asyncio.create_task(process_videos(client, user_id, processing_message.id))
        else:
            await message.reply(f"‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶∞‡¶ì {session['ad_count'] - len(ads_info)}‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

@bot.on_callback_query()
async def callback_handler(client, callback_query):
    user_id = callback_query.from_user.id
    data = callback_query.data
    session = load_session(user_id)
    if data.startswith("ads_"):
        count = int(data.split("_")[1])
        session["ad_count"] = count
        session["ads_info"] = []
        save_session(user_id, session)
        await callback_query.message.edit_text(f"‚úÖ {count}‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶ñ‡¶®:")

# --- ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
async def process_videos(client, user_id, processing_message_id):
    session = load_session(user_id)
    
    async def edit_status(text):
        try:
            await client.edit_message_text(user_id, processing_message_id, text)
        except MessageNotModified: pass
        except Exception as e: LOGGER.warning(f"‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

    movie_info = session.get("movie_info")
    ads_info = session.get("ads_info", [])
    temp_files = []

    try:
        await edit_status("üé¨ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        movie_msg = await client.get_messages(movie_info["chat_id"], movie_info["message_id"])
        movie_path = await movie_msg.download(file_name=f"movie_{user_id}.mp4")
        temp_files.append(movie_path)

        ad_paths = []
        await edit_status("üì¢ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        for idx, ad_info in enumerate(ads_info):
            ad_msg = await client.get_messages(ad_info["chat_id"], ad_info["message_id"])
            path = await ad_msg.download(file_name=f"ad_{user_id}_{idx}.mp4")
            ad_paths.append(path)
            temp_files.append(path)

        await edit_status("üîß ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶õ‡¶ø...")
        duration = get_duration(movie_path)
        segment_duration = duration // (len(ad_paths) + 1)
        
        segments_for_concat = []
        for i in range(len(ad_paths)):
            seg_file = f"segment_{user_id}_{i}.mp4"
            cut_video(movie_path, segment_duration * i, segment_duration, seg_file)
            segments_for_concat.append(seg_file)
            temp_files.append(seg_file)

        last_seg_start = segment_duration * len(ad_paths)
        last_seg_duration = duration - last_seg_start
        if last_seg_duration > 1:
            last_seg_file = f"segment_{user_id}_last.mp4"
            cut_video(movie_path, last_seg_start, last_seg_duration, last_seg_file)
            segments_for_concat.append(last_seg_file)
            temp_files.append(last_seg_file)
        
        # ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≤‡¶ø‡¶≠ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶®‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
        final_concat_list = []
        ad_iterator = iter(ad_paths)
        for seg in segments_for_concat:
            final_concat_list.append(seg)
            try:
                final_concat_list.append(next(ad_iterator))
            except StopIteration:
                pass

        concat_file = f"concat_{user_id}.txt"
        with open(concat_file, "w", encoding='utf-8') as f:
            for seg in final_concat_list:
                f.write(f"file '{os.path.basename(seg)}'\n")
        temp_files.append(concat_file)

        await edit_status("üîó ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        final_video = f"final_{user_id}.mp4"
        cmd = ["ffmpeg", "-f", "concat", "-safe", "0", "-i", concat_file, "-c", "copy", "-y", final_video]
        subprocess.run(cmd, check=True, capture_output=True)
        temp_files.append(final_video)
        
        await client.send_video(user_id, final_video, caption="‚úÖ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®‡¶∏‡¶π ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
        await client.delete_messages(user_id, processing_message_id)

    except Exception as e:
        LOGGER.error(f"‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶´‡ßá‡¶á‡¶≤‡ßç‡¶° (User ID: {user_id}): {e}", exc_info=True)
        await edit_status(f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ \n\n‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: `{e}`")

    finally:
        for f in temp_files:
            if os.path.exists(f):
                try: os.remove(f)
                except Exception: pass
        clear_session(user_id)

def get_duration(path):
    cmd = ["ffprobe", "-v", "error", "-show_entries", "format=duration", "-of", "json", path]
    result = subprocess.run(cmd, capture_output=True, text=True, check=True)
    return int(float(json.loads(result.stdout)['format']['duration']))

def cut_video(input_file, start, duration, output_file):
    cmd = ["ffmpeg", "-ss", str(start), "-i", input_file, "-t", str(duration), "-c", "copy", "-y", output_file]
    subprocess.run(cmd, capture_output=True, text=True, check=True)

# --- ‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
def run_bot():
    """Pyrogram ‡¶¨‡¶ü‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶Ø‡¶º‡•§"""
    LOGGER.info("Pyrogram ‡¶¨‡¶ü ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    asyncio.run(bot.run())

if __name__ == "__main__":
    # ‡¶¨‡¶ü‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # Flask ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
    port = int(os.environ.get("PORT", 8080))
    LOGGER.info(f"Flask ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ http://0.0.0.0:{port} ‡¶è ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    app.run(host='0.0.0.0', port=port, threaded=True)
