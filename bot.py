import os
import logging
import subprocess
import threading

from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from pymongo import MongoClient
from dotenv import load_dotenv

# .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж▓рзЛржб ржХрж░рж╛ (рж▓рзЛржХрж╛рж▓рзЗ ржЯрзЗрж╕рзНржЯрзЗрж░ ржЬржирзНржп)
load_dotenv()

# --- ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ---
# ржПржЗ ржорж╛ржиржЧрзБрж▓рзЛ Render-ржПрж░ Environment Variables ржерзЗржХрзЗ ржЖрж╕ржмрзЗ
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # ржпрзЗржоржи: https://your-bot-name.onrender.com/webhook

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- ржбрзЗржЯрж╛ржмрзЗрж╕ ржПржмржВ рж╕рзНржЯрзЗржЯ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ---
try:
    client = MongoClient(MONGO_URI)
    db = client.get_default_database() # ржХрж╛ржирзЗржХрж╢ржи рж╕рзНржЯрзНрж░рж┐ржВ ржерзЗржХрзЗ ржбрзЗржЯрж╛ржмрзЗрж╕ ржирж╛ржо ржирзЗрзЯ
    users_collection = db['users']
    logger.info("MongoDB successfully connected.")
except Exception as e:
    logger.error(f"Failed to connect to MongoDB: {e}")
    client = None # ржХрж╛ржирзЗржХрж╢ржи ржмрзНржпрж░рзНрже рж╣рж▓рзЗ ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯржХрзЗ None ржХрж░рзЗ ржжрж┐ржи

# ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржмрж┐ржнрж┐ржирзНржи ржЕржмрж╕рзНржерж╛ (States)
STATE_AWAITING_MOVIE = 'awaiting_movie'
STATE_AWAITING_AD = 'awaiting_ad'
STATE_AWAITING_AD_COUNT = 'awaiting_ad_count'

# --- Helper Functions for Database ---
def set_user_data(user_id, state=None, data=None):
    if not client: return
    query = {'user_id': user_id}
    update = {'$set': {}}
    if state:
        update['$set']['state'] = state
    if data:
        for key, value in data.items():
            update['$set'][key] = value
    
    if not update['$set']: return
    users_collection.update_one(query, update, upsert=True)

def get_user_data(user_id):
    if not client: return {}
    return users_collection.find_one({'user_id': user_id}) or {}

# --- ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржлрж╛ржВрж╢ржи (ржЖрж▓рж╛ржжрж╛ ржерзНрж░рзЗржбрзЗ ржЪрж▓ржмрзЗ) ---
def process_video(user_id, chat_id, context):
    bot = context.bot
    temp_dir = f"temp_{user_id}"
    
    try:
        user_data = get_user_data(user_id)
        movie_file_id = user_data.get('movie_file_id')
        ad_file_id = user_data.get('ad_file_id')
        ad_count = user_data.get('ad_count')

        if not all([movie_file_id, ad_file_id, ad_count]):
            raise ValueError("ржкрзНрж░рзЯрзЛржЬржирзАрзЯ рждржерзНржп ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

        # рзз. ржЕрж╕рзНржерж╛рзЯрзА ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржУ ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб
        os.makedirs(temp_dir, exist_ok=True)
        bot.send_message(chat_id, "ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ... ЁЯУе")
        
        movie_path = os.path.join(temp_dir, 'movie.mp4')
        (bot.get_file(movie_file_id)).download_to_drive(movie_path)

        ad_path = os.path.join(temp_dir, 'ad.mp4')
        (bot.get_file(ad_file_id)).download_to_drive(ad_path)
        
        bot.send_message(chat_id, "ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржиред ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ... тЪЩя╕П")

        # рзи. ржорзБржнрж┐рж░ ржорзЛржЯ ржжрзИрж░рзНржШрзНржп ржмрзЗрж░ ржХрж░рж╛
        ffprobe_cmd = ['ffprobe', '-v', 'error', '-show_entries', 'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1', movie_path]
        result = subprocess.run(ffprobe_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        duration = float(result.stdout)

        # рзй. ржорзБржнрж┐ржХрзЗ рж╕ржорж╛ржи ржЕржВрж╢рзЗ ржнрж╛ржЧ ржХрж░рзЗ ржмрж┐ржЬрзНржЮрж╛ржкржирзЗрж░ рж╕рж╛ржерзЗ ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж╛ржирзЛрж░ ржЬржирзНржп рж▓рж┐рж╕рзНржЯ рждрзИрж░рж┐
        num_splits = ad_count + 1
        split_duration = duration / num_splits
        
        concat_list_path = os.path.join(temp_dir, 'concat_list.txt')
        with open(concat_list_path, 'w') as f:
            for i in range(ad_count):
                f.write(f"file '{os.path.basename(movie_path)}'\n")
                f.write(f"inpoint {i * split_duration}\n")
                f.write(f"outpoint {(i * split_duration) + split_duration}\n")
                f.write(f"file '{os.path.basename(ad_path)}'\n")
            
            # рж╢рзЗрж╖ ржЕржВрж╢ ржпрзЛржЧ ржХрж░рж╛
            f.write(f"file '{os.path.basename(movie_path)}'\n")
            f.write(f"inpoint {ad_count * split_duration}\n")

        # рзк. FFmpeg ржжрж┐рзЯрзЗ ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛржХрзЗ ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж╛ржирзЛ
        output_path = os.path.join(temp_dir, 'final_movie.mp4')
        bot.send_message(chat_id, "ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ... ржПржЯрж┐ рж╕ржмржЪрзЗрзЯрзЗ рж╕ржорзЯрж╕рж╛ржкрзЗржХрзНрж╖ ржзрж╛ржкред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржзрзИрж░рзНржп ржзрж░рзБржиред")
        
        ffmpeg_cmd = ['ffmpeg', '-f', 'concat', '-safe', '0', '-i', concat_list_path, '-c', 'copy', output_path]
        subprocess.run(ffmpeg_cmd, check=True)

        # рзл. ржлрж╛ржЗржирж╛рж▓ ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржирзЛ
        bot.send_message(chat_id, "ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╕ржорзНржкржирзНржи! тЬЕ\nржлрж╛ржЗрж▓ржЯрж┐ ржЖржкрж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        with open(output_path, 'rb') as final_video:
            bot.send_video(chat_id, video=final_video, caption="ржЖржкржирж╛рж░ ржПржбрж┐ржЯ ржХрж░рж╛ ржорзБржнрж┐ред", read_timeout=120, write_timeout=120)

    except Exception as e:
        logger.error(f"Error processing for user {user_id}: {e}", exc_info=True)
        bot.send_message(chat_id, f"ржПржХржЯрж┐ ржЧрзБрж░рзБрждрж░ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред рж╕ржорзНржнржмржд ржлрж╛ржЗрж▓ржЯрж┐ ржЕржирзЗржХ ржмрзЬ ржЕржержмрж╛ рж╕рж╛рж░рзНржнрж╛рж░ ржПржЯрж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рждрзЗ ржкрж╛рж░рзЗржирж┐ред\n\nError: {e}\n\nржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рждрзЗ /start ржЪрж╛ржкрзБржиред")
    finally:
        # рзм. ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж╕рзНржЯрзЗржЯ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛ ржУ ржЕрж╕рзНржерж╛рзЯрзА ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛
        set_user_data(user_id, state=None, data={'movie_file_id': None, 'ad_file_id': None, 'ad_count': None})
        if os.path.exists(temp_dir):
            import shutil
            shutil.rmtree(temp_dir)

# --- Telegram Command and Message Handlers ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    set_user_data(user.id, state=STATE_AWAITING_MOVIE)
    await update.message.reply_html(f"ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ {user.mention_html()}!\n\nржЖржорж┐ ржЖржкржирж╛рж░ ржорзБржнрж┐рждрзЗ ржмрж┐ржЬрзНржЮрж╛ржкржи ржпрзБржХрзНржд ржХрж░рждрзЗ ржкрж╛рж░рж┐ред\n\nржкрзНрж░ржержорзЗ ржЖржорж╛ржХрзЗ ржЖржкржирж╛рж░ **ржорзВрж▓ ржорзБржнрж┐ ржлрж╛ржЗрж▓ржЯрж┐** ржкрж╛ржарж╛ржиред")

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    set_user_data(update.effective_user.id, state=None)
    await update.message.reply_text("ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржирждрзБржи ржХрж░рзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ /start ржЪрж╛ржкрзБржиред")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    user_data = get_user_data(user_id)
    state = user_data.get('state')

    if state == STATE_AWAITING_MOVIE:
        if update.message.video:
            set_user_data(user_id, state=STATE_AWAITING_AD, data={'movie_file_id': update.message.video.file_id})
            await update.message.reply_text("ржорзБржнрж┐ ржкрзЗрзЯрзЗржЫрж┐ред тЬЕ\n\nржПржмрж╛рж░ **ржмрж┐ржЬрзНржЮрж╛ржкржирзЗрж░ ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ржЯрж┐** ржкрж╛ржарж╛ржиред")
        else:
            await update.message.reply_text("тЭМ ржнрзБрж▓ ржЗржиржкрзБржЯред ржжрзЯрж╛ ржХрж░рзЗ ржПржХржЯрж┐ **ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓** ржкрж╛ржарж╛ржиред")

    elif state == STATE_AWAITING_AD:
        if update.message.video:
            set_user_data(user_id, state=STATE_AWAITING_AD_COUNT, data={'ad_file_id': update.message.video.file_id})
            await update.message.reply_text("ржмрж┐ржЬрзНржЮрж╛ржкржи ржкрзЗрзЯрзЗржЫрж┐ред тЬЕ\n\nржПржЦржи ржмрж▓рзБржи, ржорзБржнрж┐рж░ ржоржзрзНржпрзЗ ржорзЛржЯ **ржХрждржмрж╛рж░** ржмрж┐ржЬрзНржЮрж╛ржкржиржЯрж┐ ржмрж╕рж╛рждрзЗ ржЪрж╛ржи? (рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи, ржпрзЗржоржи: 2 ржмрж╛ 3)")
        else:
            await update.message.reply_text("тЭМ ржнрзБрж▓ ржЗржиржкрзБржЯред ржжрзЯрж╛ ржХрж░рзЗ ржПржХржЯрж┐ **ржмрж┐ржЬрзНржЮрж╛ржкржирзЗрж░ ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓** ржкрж╛ржарж╛ржиред")

    elif state == STATE_AWAITING_AD_COUNT:
        if update.message.text and update.message.text.isdigit() and int(update.message.text) > 0:
            count = int(update.message.text)
            set_user_data(user_id, state='processing', data={'ad_count': count})
            await update.message.reply_text(f"рждржерзНржп ржЧрзНрж░рж╣ржг рж╕ржорзНржкржирзНржиред ржЖржкржирж╛рж░ ржорзБржнрж┐рждрзЗ {count} ржмрж╛рж░ ржмрж┐ржЬрзНржЮрж╛ржкржи ржпрзБржХрзНржд ржХрж░рж╛рж░ ржХрж╛ржЬ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗред ржПржЯрж┐ рж╢рзЗрж╖ рж╣рждрзЗ ржХрзЯрзЗржХ ржорж┐ржирж┐ржЯ ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ ржПржХ ржШржгрзНржЯрж╛ ржмрж╛ рждрж╛рж░ ржмрзЗрж╢рж┐ржУ рж╕ржоржпрж╝ рж▓рж╛ржЧрждрзЗ ржкрж╛рж░рзЗред ржХрж╛ржЬ рж╢рзЗрж╖ рж╣рж▓рзЗ ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржлрж╛ржЗрж▓ржЯрж┐ ржкрж╛ржарж┐ржпрж╝рзЗ ржжрзЗржмред")
            
            # ржорзВрж▓ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржлрж╛ржВрж╢ржиржХрзЗ ржПржХржЯрж┐ ржЖрж▓рж╛ржжрж╛ ржерзНрж░рзЗржбрзЗ ржЪрж╛рж▓рж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
            threading.Thread(target=process_video, args=(user_id, chat_id, context)).start()
        else:
            await update.message.reply_text("тЭМ ржнрзБрж▓ ржЗржиржкрзБржЯред ржжрзЯрж╛ ржХрж░рзЗ 0-ржПрж░ ржЪрзЗрзЯрзЗ ржмрзЬ ржПржХржЯрж┐ **рж╕ржВржЦрзНржпрж╛** рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: 1, 2, 3)ред")

# --- Flask Web App for Webhook ---
app = Flask(__name__)
bot_app = Application.builder().token(TELEGRAM_TOKEN).build()

@app.route('/webhook', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot_app.bot)
    bot_app.update_queue.put(update)
    return 'ok'

def main():
    # Register handlers
    bot_app.add_handler(CommandHandler("start", start_command))
    bot_app.add_handler(CommandHandler("cancel", cancel_command))
    bot_app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, message_handler))
    
    # Set webhook
    bot_app.bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"Webhook has been set to {WEBHOOK_URL}")

if __name__ == "__main__":
    main()
    # Gunicorn ржПржЗ ржЕрзНржпрж╛ржкржЯрж┐ ржЪрж╛рж▓рж╛ржмрзЗ, рждрж╛ржЗ ржирж┐ржЪрзЗрж░ app.run() ржкрзНрж░рзЛржбрж╛ржХрж╢ржирзЗ ржмрзНржпржмрж╣рзГржд рж╣ржмрзЗ ржирж╛ред
    # For local testing, you might run this file directly.
    # HOST = '0.0.0.0'
    # PORT = 8080
    # app.run(host=HOST, port=PORT)
