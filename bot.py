import os
import logging
import subprocess
import math
import threading

from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from pymongo import MongoClient
from dotenv import load_dotenv

# .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж▓рзЛржб ржХрж░рж╛
load_dotenv()

# ржмрзЗрж╕рж┐ржХ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # ржЖржкржирж╛рж░ Render/Koyeb URL

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# MongoDB ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ
client = MongoClient(MONGO_URI)
db = client['video_bot_db']
users_collection = db['users']

# ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржмрж┐ржнрж┐ржирзНржи ржЕржмрж╕рзНржерж╛ (States)
STATE_AWAITING_MOVIE = 'awaiting_movie'
STATE_AWAITING_AD = 'awaiting_ad'
STATE_AWAITING_AD_COUNT = 'awaiting_ad_count'
STATE_PROCESSING = 'processing'

# Flask ржЕрзНржпрж╛ржк ржЗржирж┐рж╢рж┐рзЯрж╛рж▓рж╛ржЗржЬ ржХрж░рж╛
app = Flask(__name__)

# Helper Functions for Database
def get_user_state(user_id):
    user_data = users_collection.find_one({'user_id': user_id})
    return user_data.get('state') if user_data else None

def set_user_state(user_id, state, data=None):
    update_data = {'state': state}
    if data:
        update_data.update(data)
    users_collection.update_one({'user_id': user_id}, {'$set': update_data}, upsert=True)

# Command Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    set_user_state(user.id, STATE_AWAITING_MOVIE)
    await update.message.reply_html(
        f"ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ {user.mention_html()}!\n\nржЖржорж┐ ржПржХржЯрж┐ ржнрж┐ржбрж┐ржУ ржПржбрж┐ржЯрж┐ржВ ржмржЯред ржкрзНрж░ржержорзЗ ржЖржорж╛ржХрзЗ ржЖржкржирж╛рж░ ржорзБржнрж┐ ржлрж╛ржЗрж▓ржЯрж┐ ржкрж╛ржарж╛ржиред",
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    set_user_state(user_id, None) # рж╕рзНржЯрзЗржЯ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛
    await update.message.reply_text("ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржирждрзБржи ржХрж░рзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ /start ржЪрж╛ржкрзБржиред")

# Message Handler (ржорзВрж▓ рж▓ржЬрж┐ржХ ржПржЦрж╛ржирзЗ)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = get_user_state(user_id)
    bot = context.bot

    if state == STATE_AWAITING_MOVIE:
        if update.message.video:
            file_id = update.message.video.file_id
            set_user_state(user_id, STATE_AWAITING_AD, {'movie_file_id': file_id})
            await update.message.reply_text("ржорзБржнрж┐ ржкрзЗрзЯрзЗржЫрж┐ред тЬЕ\n\nржПржмрж╛рж░ ржмрж┐ржЬрзНржЮрж╛ржкржирзЗрж░ ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ржЯрж┐ ржкрж╛ржарж╛ржиред")
        else:
            await update.message.reply_text("ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржиред")

    elif state == STATE_AWAITING_AD:
        if update.message.video:
            file_id = update.message.video.file_id
            set_user_state(user_id, STATE_AWAITING_AD_COUNT, {'ad_file_id': file_id})
            await update.message.reply_text("ржмрж┐ржЬрзНржЮрж╛ржкржи ржкрзЗрзЯрзЗржЫрж┐ред тЬЕ\n\nржПржЦржи ржмрж▓рзБржи, ржорзБржнрж┐рж░ ржоржзрзНржпрзЗ ржорзЛржЯ ржХрждржмрж╛рж░ ржмрж┐ржЬрзНржЮрж╛ржкржиржЯрж┐ ржмрж╕рж╛рждрзЗ ржЪрж╛ржи? (рж╢рзБржзрзБ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи, ржпрзЗржоржи: 2 ржмрж╛ 3)")
        else:
            await update.message.reply_text("ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрж┐ржЬрзНржЮрж╛ржкржирзЗрж░ ржнрж┐ржбрж┐ржУ ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржиред")

    elif state == STATE_AWAITING_AD_COUNT:
        if update.message.text and update.message.text.isdigit():
            count = int(update.message.text)
            if count <= 0:
                await update.message.reply_text("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ 0-ржПрж░ ржЪрзЗрзЯрзЗ ржмрзЬ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред")
                return

            set_user_state(user_id, STATE_PROCESSING, {'ad_count': count})
            await update.message.reply_text(f"ржзржирзНржпржмрж╛ржжред ржЖржкржирж╛рж░ ржорзБржнрж┐рждрзЗ {count} ржмрж╛рж░ ржмрж┐ржЬрзНржЮрж╛ржкржи ржпрзБржХрзНржд ржХрж░рж╛рж░ ржХрж╛ржЬ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗред ржПржЯрж┐ рж╢рзЗрж╖ рж╣рждрзЗ ржЕржирзЗржХ рж╕ржоржпрж╝ рж▓рж╛ржЧрждрзЗ ржкрж╛рж░рзЗред ржХрж╛ржЬ рж╢рзЗрж╖ рж╣рж▓рзЗ ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржлрж╛ржЗрж▓ржЯрж┐ ржкрж╛ржарж┐ржпрж╝рзЗ ржжрзЗржмред")

            # ржорзВрж▓ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржлрж╛ржВрж╢ржиржХрзЗ ржПржХржЯрж┐ ржЖрж▓рж╛ржжрж╛ ржерзНрж░рзЗржбрзЗ ржЪрж╛рж▓рж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
            # ржпрж╛рждрзЗ ржУржпрж╝рзЗржмрж╣рзБржХ ржмрзНрж▓ржХ ржирж╛ рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝
            threading.Thread(target=process_video, args=(bot, user_id)).start()
        else:
            await update.message.reply_text("ржжржпрж╝рж╛ ржХрж░рзЗ рж╢рзБржзрзБ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред")
            
# Video Processing Function (The Magic Happens Here)
def process_video(bot, user_id):
    try:
        user_data = users_collection.find_one({'user_id': user_id})
        movie_file_id = user_data['movie_file_id']
        ad_file_id = user_data['ad_file_id']
        ad_count = user_data['ad_count']
        chat_id = user_id # user_id is the chat_id for private chats

        # ржПржХржЯрж┐ ржЗржЙржирж┐ржХ ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржХрж░рж╛
        temp_dir = f"temp_{user_id}"
        os.makedirs(temp_dir, exist_ok=True)
        
        bot.send_message(chat_id, "ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...")

        # ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб
        movie_file_obj = bot.get_file(movie_file_id)
        movie_path = os.path.join(temp_dir, 'movie.mp4')
        movie_file_obj.download_to_drive(movie_path)

        ad_file_obj = bot.get_file(ad_file_id)
        ad_path = os.path.join(temp_dir, 'ad.mp4')
        ad_file_obj.download_to_drive(ad_path)
        
        bot.send_message(chat_id, "ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржиред ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...")

        # FFmpeg ржжрж┐рзЯрзЗ ржорзБржнрж┐рж░ ржжрзИрж░рзНржШрзНржп (duration) ржмрзЗрж░ ржХрж░рж╛
        result = subprocess.run(
            ['ffprobe', '-v', 'error', '-show_entries', 'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1', movie_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        duration = float(result.stdout)

        # ржорзБржнрж┐ржХрзЗ рж╕ржорж╛ржи ржЕржВрж╢рзЗ ржнрж╛ржЧ ржХрж░рж╛
        num_splits = ad_count + 1
        split_duration = duration / num_splits
        split_points = [i * split_duration for i in range(1, num_splits)]
        
        # FFmpeg ржПрж░ ржЬржирзНржп ржХржиржХрзНржпрж╛ржЯрзЗржирзЗрж╢ржи рж▓рж┐рж╕рзНржЯ ржлрж╛ржЗрж▓ рждрзИрж░рж┐
        concat_list_path = os.path.join(temp_dir, 'concat_list.txt')
        with open(concat_list_path, 'w') as f:
            start_time = 0
            for i, end_time in enumerate(split_points):
                part_path = os.path.join(temp_dir, f'part_{i}.mp4')
                subprocess.run(['ffmpeg', '-i', movie_path, '-ss', str(start_time), '-to', str(end_time), '-c', 'copy', part_path], check=True)
                f.write(f"file '{os.path.basename(part_path)}'\n")
                f.write(f"file '{os.path.basename(ad_path)}'\n")
                start_time = end_time
            
            # рж╢рзЗрж╖ ржЕржВрж╢ ржпрзБржХрзНржд ржХрж░рж╛
            last_part_path = os.path.join(temp_dir, f'part_{num_splits-1}.mp4')
            subprocess.run(['ffmpeg', '-i', movie_path, '-ss', str(start_time), '-c', 'copy', last_part_path], check=True)
            f.write(f"file '{os.path.basename(last_part_path)}'\n")

        # ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛржХрзЗ ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж╛ржирзЛ
        output_path = os.path.join(temp_dir, 'final_movie.mp4')
        bot.send_message(chat_id, "ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж╛ржирзЛ рж╣ржЪрзНржЫрзЗ... ржПржЯрж┐ рж╕ржмржЪрзЗрзЯрзЗ рж╕ржорзЯрж╕рж╛ржкрзЗржХрзНрж╖ ржзрж╛ржкред")
        subprocess.run(
            ['ffmpeg', '-f', 'concat', '-safe', '0', '-i', concat_list_path, '-c', 'copy', output_path],
            check=True
        )

        # ржлрж╛ржЗржирж╛рж▓ ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржирзЛ
        bot.send_message(chat_id, "ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╕ржорзНржкржирзНржи! тЬЕ\nржлрж╛ржЗрж▓ржЯрж┐ ржЖржкрж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        with open(output_path, 'rb') as final_video:
            bot.send_video(chat_id, video=final_video, caption="ржЖржкржирж╛рж░ ржПржбрж┐ржЯ ржХрж░рж╛ ржорзБржнрж┐ред", timeout=120)

    except Exception as e:
        logger.error(f"Error processing for user {user_id}: {e}")
        bot.send_message(chat_id, f"ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи /start ржжрж┐рзЯрзЗред")
    finally:
        # ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж╕рзНржЯрзЗржЯ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛
        set_user_state(user_id, None)
        # ржЕрж╕рзНржерж╛рзЯрзА ржлрж╛ржЗрж▓ ржУ ржлрзЛрж▓рзНржбрж╛рж░ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛
        if 'temp_dir' in locals() and os.path.exists(temp_dir):
            for file in os.listdir(temp_dir):
                os.remove(os.path.join(temp_dir, file))
            os.rmdir(temp_dir)

# Webhook route for Flask
@app.route('/webhook', methods=['POST'])
def webhook():
    json_data = request.get_json()
    update = Update.de_json(json_data, bot_application.bot)
    bot_application.update_queue.put(update)
    return "OK", 200

def main():
    global bot_application
    bot_application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Register handlers
    bot_application.add_handler(CommandHandler("start", start))
    bot_application.add_handler(CommandHandler("cancel", cancel))
    bot_application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    
    # Set webhook
    bot_application.bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"Webhook set to {WEBHOOK_URL}")

if __name__ == "__main__":
    main()
    # Flask ржЕрзНржпрж╛ржкржЯрж┐ ржПржХржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрж╢ржи-ржЧрзНрж░рзЗржб рж╕рж╛рж░рзНржнрж╛рж░рзЗ ржЪрж╛рж▓рж╛ржирзЛ ржЙржЪрж┐ржд, ржпрзЗржоржи gunicorn
    # ржЙржжрж╛рж╣рж░ржг: gunicorn --bind 0.0.0.0:8000 bot:app
    # Render/Koyeb ржПржЯрж┐ рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржХрж░ржмрзЗред
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))
