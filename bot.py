import os
import asyncio
import subprocess
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask, request, abort, jsonify # Flask ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

# ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá API_ID, API_HASH, BOT_TOKEN ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
API_ID = int(os.environ.get("API_ID"))
API_HASH = os.environ.get("API_HASH")
BOT_TOKEN = os.environ.get("BOT_TOKEN")
# Render ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ ‡¶•‡ßá‡¶ï‡ßá PORT ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶®‡¶ø‡¶®, ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá 5000 ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü
PORT = int(os.environ.get("PORT", 5000))
# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï URL, ‡¶è‡¶ü‡¶ø Render ‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶π‡ßã‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç ‡¶™‡ßç‡¶∞‡ßã‡¶≠‡¶æ‡¶á‡¶°‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶¨‡ßá‡¶®
# ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: https://your-bot-name.onrender.com/
WEBHOOK_URL = os.environ.get("WEBHOOK_URL") + "/webhook" # /webhook ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

# Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
app = Flask(__name__)

# Pyrogram ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
# Webhook ‡¶Æ‡ßã‡¶°‡ßá ‡¶ö‡¶≤‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø no_updates=True ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
bot = Client("ad_merge_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN, no_updates=True)

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßá‡¶∂‡¶® ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø
user_sessions = {}

# ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
@bot.on_message(filters.command("start") & filters.private)
async def start(client, message):
    user_sessions[message.from_user.id] = {}
    await message.reply("üëã ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®:")

# ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
@bot.on_message(filters.video & filters.private)
async def handle_video(client, message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})

    if "movie" not in session:
        session["movie"] = message
        user_sessions[user_id] = session
        await message.reply(
            "üì¢ ‡¶ï‡¶§‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¨‡¶∏‡¶æ‡¶¨‡ßá‡¶®?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("1", callback_data="ads_1")],
                [InlineKeyboardButton("2", callback_data="ads_2")],
                [InlineKeyboardButton("3", callback_data="ads_3")],
            ])
        )
    else:
        ads = session.get("ads", [])
        ads.append(message)
        session["ads"] = ads
        user_sessions[user_id] = session

        if len(ads) == session.get("ad_count", 1):
            await message.reply("üîß ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶õ‡¶ø, ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...")
            # asyncio.create_task ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶π‡ßÅ‡¶ï ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º
            asyncio.create_task(process_videos(client, user_id))
        else:
            await message.reply(f"‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶∞‡¶ì {session['ad_count'] - len(ads)}‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

# ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∞‡¶ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
@bot.on_callback_query()
async def callback_handler(client, callback_query):
    user_id = callback_query.from_user.id
    data = callback_query.data
    session = user_sessions.get(user_id, {})

    if data.startswith("ads_"):
        count = int(data.split("_")[1])
        session["ad_count"] = count
        session["ads"] = []
        user_sessions[user_id] = session
        await callback_query.message.edit_text(f"‚úÖ {count}‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶ñ‡¶®:")

# ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)
async def process_videos(client, user_id):
    session = user_sessions.get(user_id)
    movie_msg = session.get("movie")
    ads_msg = session.get("ads", [])

    movie_path = None
    ad_paths = []
    temp_segment_files = []

    try:
        await client.send_message(user_id, "üé¨ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        movie_path = await movie_msg.download(file_name=f"movie_{user_id}.mp4")
        await client.send_message(user_id, "üì¢ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        for idx, ad in enumerate(ads_msg):
            path = await ad.download(file_name=f"ad_{user_id}_{idx}.mp4")
            ad_paths.append(path)
        await client.send_message(user_id, "üîß ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶õ‡¶ø...")

        duration = get_duration(movie_path)
        if duration is None or duration == 0:
            raise ValueError("‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø ‡¶¨‡¶æ ‡¶è‡¶ü‡¶ø ‡¶Ö‡¶¨‡ßà‡¶ß‡•§")

        segment_duration = duration // (len(ad_paths) + 1)
        if segment_duration <= 0:
            raise ValueError("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤ ‡¶ñ‡ßÅ‡¶¨ ‡¶ï‡¶Æ ‡¶¨‡¶æ ‡¶∂‡ßÅ‡¶®‡ßç‡¶Ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò‡¶§‡¶∞ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

        segments = []

        for i in range(len(ad_paths)):
            seg_file = f"segment_{user_id}_{i}.mp4"
            await client.send_message(user_id, f"‚úÇÔ∏è ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü {i+1} ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            cut_video(movie_path, segment_duration * i, segment_duration, seg_file)
            segments.append(seg_file)
            temp_segment_files.append(seg_file)
            segments.append(ad_paths[i])

        last_seg = f"segment_{user_id}_last.mp4"
        await client.send_message(user_id, "‚úÇÔ∏è ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        cut_video(movie_path, segment_duration * len(ad_paths), duration - (segment_duration * len(ad_paths)), last_seg)
        segments.append(last_seg)
        temp_segment_files.append(last_seg)

        concat_file = f"concat_{user_id}.txt"
        with open(concat_file, "w") as f:
            for seg in segments:
                f.write(f"file '{seg}'\n")
        await client.send_message(user_id, "üîó ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

        final_video = f"final_{user_id}.mp4"
        cmd = [
            "ffmpeg", "-f", "concat", "-safe", "0", "-i", concat_file,
            "-c:v", "copy",
            "-c:a", "copy",
            "-y", final_video
        ]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if process.returncode != 0:
            print(f"FFmpeg Concat Error (User ID: {user_id}):\nSTDOUT: {process.stdout}\nSTDERR: {process.stderr}")
            raise RuntimeError(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {process.stderr[:500]}...")
        else:
            print(f"FFmpeg Concat Success (User ID: {user_id}):\nSTDOUT: {process.stdout}")

        await client.send_video(user_id, final_video, caption="‚úÖ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®‡¶∏‡¶π ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")

    except Exception as e:
        print(f"Error processing video for user {user_id}: {e}")
        await client.send_message(user_id, f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§ \n\n‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: `{e}`")

    finally:
        cleanup_files = [movie_path, concat_file, final_video] + ad_paths + temp_segment_files
        for f in cleanup_files:
            if f and os.path.exists(f):
                try:
                    os.remove(f)
                    print(f"Cleaned up: {f}")
                except Exception as e:
                    print(f"Error cleaning up file {f}: {e}")

        user_sessions.pop(user_id, None)

def get_duration(path):
    import json
    try:
        result = subprocess.run(
            ["ffprobe", "-v", "error", "-show_entries", "format=duration", "-of",
             "json", path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        if result.returncode != 0:
            print(f"FFprobe Error (Path: {path}):\nSTDOUT: {result.stdout}\nSTDERR: {result.stderr}")
            return None
        output = json.loads(result.stdout)
        return int(float(output['format']['duration']))
    except Exception as e:
        print(f"Exception in get_duration for {path}: {e}")
        return None

def cut_video(input_file, start, duration, output_file):
    cmd = [
        "ffmpeg", "-ss", str(start), "-i", input_file, "-t", str(duration),
        "-c:v", "copy",
        "-c:a", "copy",
        output_file, "-y"
    ]
    process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if process.returncode != 0:
        print(f"FFmpeg Cut Error (Input: {input_file}, Output: {output_file}):\nSTDOUT: {process.stdout}\nSTDERR: {process.stderr}")
        raise RuntimeError(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡¶æ‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {process.stderr[:500]}...")

# Flask ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶π‡ßÅ‡¶ï ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü
@app.route("/webhook", methods=["POST"])
async def telegram_webhook():
    if not request.json:
        abort(400) # ‡¶Ø‡¶¶‡¶ø JSON ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, 400 Bad Request ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®

    # Pyrogram-‡¶è‡¶∞ process_update ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶á‡¶®‡¶ï‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
    # ‡¶è‡¶ü‡¶ø Pyrogram-‡¶è‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶ü‡ßç‡¶∞‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá
    await bot.process_update(request.json)
    return jsonify({"status": "ok"}) # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ï‡ßá ‡¶∏‡¶´‡¶≤ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®

# ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
async def set_webhook():
    if WEBHOOK_URL:
        try:
            print(f"Setting webhook to: {WEBHOOK_URL}")
            await bot.start() # ‡¶¨‡¶ü ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
            await bot.set_webhook(WEBHOOK_URL)
            print("Webhook set successfully!")
        except Exception as e:
            print(f"Failed to set webhook: {e}")
    else:
        print("WEBHOOK_URL environment variable is not set. Cannot set webhook.")
        print("Please set WEBHOOK_URL to your public bot URL (e.g., https://your-app-name.onrender.com/).")

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶π‡ßÅ‡¶ï ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
if __name__ == "__main__":
    # Pyrogram ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶π‡ßÅ‡¶ï ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    # ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßÉ‡¶•‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶®‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º
    asyncio.get_event_loop().run_until_complete(set_webhook())

    print(f"Flask app starting on port {PORT}...")
    # Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
    # debug=True ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§ ‡¶®‡¶Ø‡¶º
    # host='0.0.0.0' ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶è‡¶ü‡¶ø ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶´‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶π‡¶Ø‡¶º
    app.run(host='0.0.0.0', port=PORT, debug=False)
