# bot.py

import os
import asyncio
import subprocess
import json
import logging

from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import MessageNotModified

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá Render-‡¶è‡¶∞ ‡¶≤‡¶ó‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGGER = logging.getLogger(__name__)

# ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá API_ID, API_HASH, BOT_TOKEN ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
try:
    API_ID = int(os.environ.get("API_ID"))
    API_HASH = os.environ.get("API_HASH")
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
except (ValueError, TypeError):
    LOGGER.critical("API_ID, API_HASH, ‡¶¨‡¶æ BOT_TOKEN ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§ ‡¶¨‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§")
    exit()

# Pyrogram ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
bot = Client("ad_merge_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# --- ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶´‡¶æ‡¶á‡¶≤-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶∏‡ßá‡¶∂‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ---
SESSIONS_DIR = "user_sessions"
if not os.path.exists(SESSIONS_DIR):
    os.makedirs(SESSIONS_DIR)

def get_session_path(user_id):
    """‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶• ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§"""
    return os.path.join(SESSIONS_DIR, f"{user_id}.json")

def save_session(user_id, data):
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡ßá‡¶∂‡¶® ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá‡•§"""
    try:
        with open(get_session_path(user_id), "w") as f:
            json.dump(data, f, indent=4)
    except Exception as e:
        LOGGER.error(f"‡¶∏‡ßá‡¶∂‡¶® ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (User ID: {user_id}): {e}")

def load_session(user_id):
    """‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡ßá‡¶∂‡¶® ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡•§"""
    path = get_session_path(user_id)
    if os.path.exists(path):
        try:
            with open(path, "r") as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            return {}
    return {}

def clear_session(user_id):
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡ßü‡•§"""
    path = get_session_path(user_id)
    if os.path.exists(path):
        try:
            os.remove(path)
        except OSError as e:
            LOGGER.error(f"‡¶∏‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (User ID: {user_id}): {e}")

# --- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---

@bot.on_message(filters.command("start") & filters.private)
async def start(client, message):
    user_id = message.from_user.id
    clear_session(user_id)
    save_session(user_id, {})  # ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶∏‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
    await message.reply("üëã ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®:")

@bot.on_message(filters.video & filters.private)
async def handle_video(client, message):
    user_id = message.from_user.id
    session = load_session(user_id)

    # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶∏‡ßá‡¶∂‡¶® ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
    if session is None:
        await message.reply("‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /start ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ß‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
    if "movie_info" not in session:
        session["movie_info"] = {"chat_id": message.chat.id, "message_id": message.id}
        save_session(user_id, session)
        await message.reply(
            "üì¢ ‡¶ï‡¶§‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¨‡¶∏‡¶æ‡¶¨‡ßá‡¶®?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("1", callback_data="ads_1"),
                 InlineKeyboardButton("2", callback_data="ads_2"),
                 InlineKeyboardButton("3", callback_data="ads_3")],
            ])
        )
    # ‡¶™‡¶∞‡ßá‡¶∞ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ß‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
    else:
        # ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
        if "ad_count" not in session:
            await message.reply("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            return

        ads_info = session.get("ads_info", [])
        ads_info.append({"chat_id": message.chat.id, "message_id": message.id})
        session["ads_info"] = ads_info
        save_session(user_id, session)

        if len(ads_info) == session.get("ad_count", 0):
            processing_message = await message.reply("üîß ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶õ‡¶ø, ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...")
            # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ö‡¶≤‡¶¨‡ßá
            asyncio.create_task(process_videos(client, user_id, processing_message.id))
        else:
            await message.reply(f"‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶∞‡¶ì {session['ad_count'] - len(ads_info)}‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

@bot.on_callback_query()
async def callback_handler(client, callback_query):
    user_id = callback_query.from_user.id
    data = callback_query.data
    session = load_session(user_id)

    if data.startswith("ads_"):
        count = int(data.split("_")[1])
        session["ad_count"] = count
        session["ads_info"] = []
        save_session(user_id, session)
        await callback_query.message.edit_text(f"‚úÖ {count}‡¶ü‡¶ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶ñ‡¶®:")

async def process_videos(client, user_id, processing_message_id):
    session = load_session(user_id)
    
    async def edit_status(text):
        try:
            await client.edit_message_text(user_id, processing_message_id, text)
        except MessageNotModified:
            pass
        except Exception as e:
            LOGGER.warning(f"‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

    movie_info = session.get("movie_info")
    ads_info = session.get("ads_info", [])
    
    temp_files = []

    try:
        await edit_status("üé¨ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        movie_msg = await client.get_messages(movie_info["chat_id"], movie_info["message_id"])
        movie_path = await movie_msg.download(file_name=f"movie_{user_id}.mp4")
        temp_files.append(movie_path)

        ad_paths = []
        await edit_status("üì¢ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        for idx, ad_info in enumerate(ads_info):
            ad_msg = await client.get_messages(ad_info["chat_id"], ad_info["message_id"])
            path = await ad_msg.download(file_name=f"ad_{user_id}_{idx}.mp4")
            ad_paths.append(path)
            temp_files.append(path)

        await edit_status("üîß ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶õ‡¶ø...")
        duration = get_duration(movie_path)
        segment_duration = duration // (len(ad_paths) + 1)
        
        segments_for_concat = []
        
        # ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ
        for i in range(len(ad_paths)):
            seg_file = f"segment_{user_id}_{i}.mp4"
            await edit_status(f"‚úÇÔ∏è ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü {i+1} ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            cut_video(movie_path, segment_duration * i, segment_duration, seg_file)
            segments_for_concat.append(seg_file)
            temp_files.append(seg_file)
            segments_for_concat.append(ad_paths[i])

        # ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶∂‡ßá‡¶∑ ‡¶Ö‡¶Ç‡¶∂ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ
        last_seg_start = segment_duration * len(ad_paths)
        last_seg_duration = duration - last_seg_start
        if last_seg_duration > 1:
            await edit_status("‚úÇÔ∏è ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶∂‡ßá‡¶∑ ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            last_seg_file = f"segment_{user_id}_last.mp4"
            cut_video(movie_path, last_seg_start, last_seg_duration, last_seg_file)
            segments_for_concat.append(last_seg_file)
            temp_files.append(last_seg_file)

        concat_file = f"concat_{user_id}.txt"
        with open(concat_file, "w", encoding='utf-8') as f:
            for seg in segments_for_concat:
                f.write(f"file '{os.path.basename(seg)}'\n")
        temp_files.append(concat_file)

        await edit_status("üîó ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        final_video = f"final_{user_id}.mp4"
        cmd = ["ffmpeg", "-f", "concat", "-safe", "0", "-i", concat_file, "-c", "copy", "-y", final_video]
        process = subprocess.run(cmd, capture_output=True, text=True)
        if process.returncode != 0:
            LOGGER.error(f"FFMPEG Concat Error: {process.stderr}")
            raise RuntimeError(f"‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§")
        temp_files.append(final_video)
        
        await client.send_video(user_id, final_video, caption="‚úÖ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®‡¶∏‡¶π ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
        await client.delete_messages(user_id, processing_message_id) # ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ

    except Exception as e:
        LOGGER.error(f"‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶´‡ßá‡¶á‡¶≤‡ßç‡¶° (User ID: {user_id}): {e}", exc_info=True)
        error_message = f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ \n\n‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: `{e}`"
        await edit_status(error_message)

    finally:
        for f in temp_files:
            if os.path.exists(f):
                try:
                    os.remove(f)
                except Exception as e:
                    LOGGER.error(f"‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ {f}: {e}")
        clear_session(user_id)

def get_duration(path):
    cmd = ["ffprobe", "-v", "error", "-show_entries", "format=duration", "-of", "json", path]
    result = subprocess.run(cmd, capture_output=True, text=True, check=True)
    return int(float(json.loads(result.stdout)['format']['duration']))

def cut_video(input_file, start, duration, output_file):
    cmd = ["ffmpeg", "-ss", str(start), "-i", input_file, "-t", str(duration), "-c", "copy", "-y", output_file]
    subprocess.run(cmd, capture_output=True, text=True, check=True)

async def main():
    """‡¶¨‡¶ü‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ö‡¶≤‡¶§‡ßá ‡¶∞‡¶æ‡¶ñ‡ßá"""
    LOGGER.info("‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    await bot.start()
    me = await bot.get_me()
    LOGGER.info(f"{me.first_name} | @{me.username} ‡¶¨‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        LOGGER.info("‡¶¨‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
