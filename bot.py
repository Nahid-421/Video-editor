import os
import asyncio
import subprocess
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ ржерзЗржХрзЗ API_ID, API_HASH, BOT_TOKEN рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
API_ID = int(os.environ.get("API_ID"))
API_HASH = os.environ.get("API_HASH")
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# Pyrogram ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
bot = Client("ad_merge_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# ржЗржЙржЬрж╛рж░ рж╕рзЗрж╢ржи ржбрзЗржЯрж╛ рж╕ржВрж░ржХрзНрж╖ржгрзЗрж░ ржЬржирзНржп ржбрж┐ржХрж╢ржирж╛рж░рж┐
user_sessions = {}

# рж╕рзНржЯрж╛рж░рзНржЯ ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@bot.on_message(filters.command("start") & filters.private)
async def start(client, message):
    user_sessions[message.from_user.id] = {} # ржирждрзБржи рж╕рзЗрж╢ржи рж╢рзБрж░рзБ
    await message.reply("ЁЯСЛ ржорзБржнрж┐ ржнрж┐ржбрж┐ржУ ржлрж░ржУржпрж╝рж╛рж░рзНржб ржХрж░рзБржи:")

# ржнрж┐ржбрж┐ржУ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@bot.on_message(filters.video & filters.private)
async def handle_video(client, message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})

    if "movie" not in session:
        # ржпржжрж┐ ржкрзНрж░ржержо ржнрж┐ржбрж┐ржУ рж╣ржпрж╝, рж╕рзЗржЯрж╛ржХрзЗ ржорзБржнрж┐ рж╣рж┐рж╕рзЗржмрзЗ рж╕рзЗржн ржХрж░рж╛ рж╣ржмрзЗ
        session["movie"] = message
        user_sessions[user_id] = session
        await message.reply(
            "ЁЯУв ржХрждржЯрж┐ ржмрж┐ржЬрзНржЮрж╛ржкржи ржнрж┐ржбрж┐ржУ ржмрж╕рж╛ржмрзЗржи?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("1", callback_data="ads_1")],
                [InlineKeyboardButton("2", callback_data="ads_2")],
                [InlineKeyboardButton("3", callback_data="ads_3")],
            ])
        )
    else:
        # ржкрж░рзЗрж░ ржнрж┐ржбрж┐ржУржЧрзБрж▓рзЛ ржмрж┐ржЬрзНржЮрж╛ржкржи рж╣рж┐рж╕рзЗржмрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣ржмрзЗ
        ads = session.get("ads", [])
        ads.append(message)
        session["ads"] = ads
        user_sessions[user_id] = session

        # ржпржжрж┐ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж╕ржВржЦрзНржпржХ ржмрж┐ржЬрзНржЮрж╛ржкржи ржнрж┐ржбрж┐ржУ ржкрзЗржпрж╝рзЗ ржпрж╛ржпрж╝, ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╢рзБрж░рзБ рж╣ржмрзЗ
        if len(ads) == session.get("ad_count", 1):
            await message.reply("ЁЯФз ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕ рж╢рзБрж░рзБ ржХрж░ржЫрж┐, ржПржХржЯрзБ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...")
            await process_videos(client, user_id)
        else:
            # ржЖрж░ржУ ржмрж┐ржЬрзНржЮрж╛ржкржи ржнрж┐ржбрж┐ржУрж░ ржЬржирзНржп ржЕржирзБрж░рзЛржз
            await message.reply(f"ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖрж░ржУ {session['ad_count'] - len(ads)}ржЯрж┐ ржмрж┐ржЬрзНржЮрж╛ржкржи ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржиред")

# ржХрж▓ржмрзНржпрж╛ржХ ржХрзЛржпрж╝рзЗрж░рж┐ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@bot.on_callback_query()
async def callback_handler(client, callback_query):
    user_id = callback_query.from_user.id
    data = callback_query.data
    session = user_sessions.get(user_id, {})

    if data.startswith("ads_"):
        count = int(data.split("_")[1]) # ржмрж┐ржЬрзНржЮрж╛ржкржирзЗрж░ рж╕ржВржЦрзНржпрж╛ ржирж┐рж░рзНржзрж╛рж░ржг
        session["ad_count"] = count
        session["ads"] = [] # ржмрж┐ржЬрзНржЮрж╛ржкржи ржнрж┐ржбрж┐ржУ рждрж╛рж▓рж┐ржХрж╛ рж░рж┐рж╕рзЗржЯ
        user_sessions[user_id] = session
        await callback_query.message.edit_text(f"тЬЕ {count}ржЯрж┐ ржмрж┐ржЬрзНржЮрж╛ржкржи ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржи ржПржЦржи:")

# ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржлрж╛ржВрж╢ржи
async def process_videos(client, user_id):
    session = user_sessions.get(user_id)
    movie_msg = session.get("movie")
    ads_msg = session.get("ads", [])

    movie_path = None
    ad_paths = []
    temp_segment_files = [] # ржХрзНрж▓рж┐ржиржЖржкрзЗрж░ ржЬржирзНржп ржлрж╛ржЗрж▓ рж▓рж┐рж╕рзНржЯ

    try:
        await client.send_message(user_id, "ЁЯОм ржорзБржнрж┐ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб рж╣ржЪрзНржЫрзЗ...")
        movie_path = await movie_msg.download(file_name=f"movie_{user_id}.mp4")
        await client.send_message(user_id, "ЁЯУв ржмрж┐ржЬрзНржЮрж╛ржкржи ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб рж╣ржЪрзНржЫрзЗ...")
        for idx, ad in enumerate(ads_msg):
            path = await ad.download(file_name=f"ad_{user_id}_{idx}.mp4")
            ad_paths.append(path)
        await client.send_message(user_id, "ЁЯФз ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ рж╢рзБрж░рзБ ржХрж░ржЫрж┐...")

        duration = get_duration(movie_path)
        if duration is None or duration == 0:
            raise ValueError("ржорзБржнрж┐ ржнрж┐ржбрж┐ржУрж░ рж╕ржоржпрж╝ржХрж╛рж▓ ржирж┐рж░рзНржгржпрж╝ ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ ржмрж╛ ржПржЯрж┐ ржЕржмрзИржзред")

        segment_duration = duration // (len(ad_paths) + 1)
        if segment_duration <= 0:
            # ржПржЯрж┐ ржШржЯрзЗ ржпржЦржи ржорзБржнрж┐ ржмрж┐ржЬрзНржЮрж╛ржкржирзЗрж░ ржерзЗржХрзЗ ржЫрзЛржЯ рж╣ржпрж╝
            raise ValueError("ржнрж┐ржбрж┐ржУ рж╕рзЗржЧржорзЗржирзНржЯрзЗрж░ рж╕ржоржпрж╝ржХрж╛рж▓ ржЦрзБржм ржХржо ржмрж╛ рж╢рзБржирзНржпред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржжрзАрж░рзНржШрждрж░ ржорзБржнрж┐ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржиред")


        segments = []

        # movie segments + ads interleaved
        for i in range(len(ad_paths)):
            seg_file = f"segment_{user_id}_{i}.mp4"
            await client.send_message(user_id, f"тЬВя╕П ржорзБржнрж┐ рж╕рзЗржЧржорзЗржирзНржЯ {i+1} ржХрж╛ржЯрж╛ рж╣ржЪрзНржЫрзЗ...")
            cut_video(movie_path, segment_duration * i, segment_duration, seg_file)
            segments.append(seg_file)
            temp_segment_files.append(seg_file)
            segments.append(ad_paths[i])

        # рж╢рзЗрж╖ рж╕рзЗржЧржорзЗржирзНржЯ
        last_seg = f"segment_{user_id}_last.mp4"
        await client.send_message(user_id, "тЬВя╕П ржорзБржнрж┐ рж╢рзЗрж╖ рж╕рзЗржЧржорзЗржирзНржЯ ржХрж╛ржЯрж╛ рж╣ржЪрзНржЫрзЗ...")
        cut_video(movie_path, segment_duration * len(ad_paths), duration - (segment_duration * len(ad_paths)), last_seg)
        segments.append(last_seg)
        temp_segment_files.append(last_seg)

        # concat ржлрж╛ржЗрж▓ рждрзИрж░рж┐
        concat_file = f"concat_{user_id}.txt"
        with open(concat_file, "w") as f:
            for seg in segments:
                f.write(f"file '{seg}'\n")
        await client.send_message(user_id, "ЁЯФЧ ржнрж┐ржбрж┐ржУржЧрзБрж▓рзЛ ржпрзБржХрзНржд ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")

        # ржлрж╛ржЗржирж╛рж▓ ржорж┐ржХрзНрж╕ржб ржнрж┐ржбрж┐ржУ - ржЕржбрж┐ржУ-ржнрж┐ржбрж┐ржУ рж╕рзНржЯрзНрж░рж┐ржо рж╕рж░рж╛рж╕рж░рж┐ ржХржкрж┐ ржХрж░рж╛ рж╣ржмрзЗ
        final_video = f"final_{user_id}.mp4"
        cmd = [
            "ffmpeg", "-f", "concat", "-safe", "0", "-i", concat_file,
            "-c:v", "copy",  # ржнрж┐ржбрж┐ржУ рж╕рзНржЯрзНрж░рж┐ржо ржХржкрж┐
            "-c:a", "copy",  # ржЕржбрж┐ржУ рж╕рзНржЯрзНрж░рж┐ржо ржХржкрж┐
            "-y", final_video
        ]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if process.returncode != 0:
            print(f"FFmpeg Concat Error (User ID: {user_id}):\nSTDOUT: {process.stdout}\nSTDERR: {process.stderr}")
            raise RuntimeError(f"ржнрж┐ржбрж┐ржУ ржпрзБржХрзНржд ржХрж░рждрзЗ ржмрзНржпрж░рзНржеред рждрзНрж░рзБржЯрж┐: {process.stderr[:500]}...")
        else:
            print(f"FFmpeg Concat Success (User ID: {user_id}):\nSTDOUT: {process.stdout}")


        # ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржи ржЗржЙржЬрж╛рж░ржХрзЗ
        await client.send_video(user_id, final_video, caption="тЬЕ ржмрж┐ржЬрзНржЮрж╛ржкржирж╕рж╣ ржорзБржнрж┐ ржкрзНрж░рж╕рзНрждрзБржд рж╣рзЯрзЗржЫрзЗ!")

    except Exception as e:
        # ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждрзНрж░рзБржЯрж┐ ржмрж╛рж░рзНрждрж╛ ржЗржЙржЬрж╛рж░ржХрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
        print(f"Error processing video for user {user_id}: {e}") # рж╕рж╛рж░рзНржнрж╛рж░ рж▓ржЧ
        await client.send_message(user_id, f"тЭМ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржмрж╛ ржЕржирзНржп ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржиред \n\nрждрзНрж░рзБржЯрж┐: `{e}`")

    finally:
        # ржХрзНрж▓рж┐ржиржЖржк
        cleanup_files = [movie_path, concat_file, final_video] + ad_paths + temp_segment_files
        for f in cleanup_files:
            if f and os.path.exists(f): # ржлрж╛ржЗрж▓ржЯрж┐ ржЖржЫрзЗ ржХрж┐ржирж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи
                try:
                    os.remove(f)
                    print(f"Cleaned up: {f}")
                except Exception as e:
                    print(f"Error cleaning up file {f}: {e}")

        user_sessions.pop(user_id, None)

def get_duration(path):
    import json
    try:
        result = subprocess.run(
            ["ffprobe", "-v", "error", "-show_entries", "format=duration", "-of",
             "json", path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        if result.returncode != 0:
            print(f"FFprobe Error (Path: {path}):\nSTDOUT: {result.stdout}\nSTDERR: {result.stderr}")
            return None

        output = json.loads(result.stdout)
        return int(float(output['format']['duration']))
    except Exception as e:
        print(f"Exception in get_duration for {path}: {e}")
        return None


def cut_video(input_file, start, duration, output_file):
    cmd = [
        "ffmpeg", "-ss", str(start), "-i", input_file, "-t", str(duration),
        "-c:v", "copy",  # ржнрж┐ржбрж┐ржУ рж╕рзНржЯрзНрж░рж┐ржо ржХржкрж┐
        "-c:a", "copy",  # ржЕржбрж┐ржУ рж╕рзНржЯрзНрж░рж┐ржо ржХржкрж┐
        output_file, "-y"
    ]
    process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if process.returncode != 0:
        print(f"FFmpeg Cut Error (Input: {input_file}, Output: {output_file}):\nSTDOUT: {process.stdout}\nSTDERR: {process.stderr}")
        raise RuntimeError(f"ржнрж┐ржбрж┐ржУ ржХрж╛ржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНржеред рждрзНрж░рзБржЯрж┐: {process.stderr[:500]}...")


if __name__ == "__main__":
    print("Bot is starting...")
    bot.run()
